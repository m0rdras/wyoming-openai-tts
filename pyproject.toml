[tool.poetry]
name = "wyoming-openai-tts"
version = "1.0.0"
description = "Wyoming protocol server for OpenAI text-to-speech"
authors = ["Stefan Kirsch"]
license = "MIT"
readme = "README.md"
repository = "https://github.com/m0rdras/wyoming-openai-tts"
packages = [{include = "wyoming_openai_tts"}]
keywords = ["rhasspy", "wyoming", "openai", "tts"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Topic :: Text Processing :: Linguistic",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]

[tool.poetry.dependencies]
python = "^3.9"
wyoming = "^1.6.0"
openai = "^1.54.4"

[tool.poetry.group.dev.dependencies]
black = "^24.0.0"
ruff = "^0.3.0"
pytest = "^8.0.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
select = [
    "B007",    # Loop control variable {name} not used within loop body
    "B014",    # Exception handler with duplicate exception
    "C",       # complexity
    "D",       # docstrings
    "E",       # pycodestyle
    "F",       # pyflakes/autoflake
    "ICN001",  # import concentions; {name} should be imported as {asname}
    "PGH004",  # Use specific rule codes when using noqa
    "PLC0414", # Useless import alias. Import alias does not rename original package
    "SIM105",  # Use contextlib.suppress({exception}) instead of try-except-pass
    "SIM117",  # Merge with-statements that use the same scope
    "SIM118",  # Use {key} in {dict} instead of {key} in {dict}.keys()
    "SIM201",  # Use {left} != {right} instead of not {left} == {right}
    "SIM212",  # Use {a} if {a} else {b} instead of {b} if not {a} else {a}
    "SIM300",  # Yoda conditions. Use 'age == 42' instead of '42 == age'
    "SIM401",  # Use get from dict with default instead of an if block
    "T20",     # flake8-print
    "TRY004",  # Prefer TypeError exception for invalid type
    "RUF006",  # Store a reference to the return value of asyncio.create_task
    "UP",      # pyupgrade
    "W",       # pycodestyle
] 